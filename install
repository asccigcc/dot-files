#!/bin/bash

# Install and configure dot-files
#
# Maintainer: asccigcc
#
# Usage:
#   ./install

# Prompt the user to confirm installation
echo -e "\xE2\x9A\x99 Installing Dot-files \xE2\x9A\x99"
echo "The following process will overwrite your current configuration and Install the OS dependencies."
read -p "Do you want to proceed with the dot-files installation? [y/N] " confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    echo "Installation cancelled"
    exit 1
fi

# Load config variables
source config.txt

copy_files() {
    # Copy dot files
    for file in "${files[@]}"; do
        # Check if the destination file already exists
        if [ -f "${HOME}/${file}" ]; then
            read -p "Do you want to overwrite ${file}? [y/N] " overwrite
            if [[ $overwrite =~ ^[Yy]$ ]]; then
                # Check if we have previous copies
                count=$(find "${HOME}" -maxdepth 1 -name "${file}.*" | wc -l)
                copy_num=$((count + 1))
                # Making a backup file
                cp "${HOME}/${file}" "${HOME}/${file}.${copy_num}"
                cp "$file" "${HOME}/${file}"
                echo -e "\xE2\x9C\x85 ${HOME}/${file}"
            else
                echo "File ${HOME}/${file} not overwritten in destination"
            fi
        else
            cp "$file" "${HOME}/${file}"
            echo -e "\xE2\x9C\x85 ${HOME}/${file}"
        fi
    done
}

copy_dirs() {
    # Copy dot directories
    echo -e "Preparing Directories \xE2\x9E\xA1"
    for dir in "${directories[@]}"; do
        if [ -d "${HOME}/${dir}" ]; then
            read -p "Do you want to overwrite ${dir}? [y/N] " overwrite
            if [[ $overwrite =~ ^[Yy]$ ]]; then
                # Check if we have previous copies
                count=$(find "${HOME}" -maxdepth 1 -name "${dir}.*" | wc -l)
                copy_num=$((count + 1))
                # Making a backup file
                cp -rf "${HOME}/${dir}" "${HOME}/${dir}.${copy_num}"
                cp -rf "$dir" "${HOME}/${dir}"
                echo -e "\xE2\x9C\x85 ${HOME}/${dir}"
            else
                echo "Directory ${HOME}/${dir} not overwritten in destination"
            fi
        else
            cp -rf "$dir" "${HOME}/${dir}"
            echo -e "\xE2\x9C\x85 ${HOME}/${dir}"
        fi
    done
}

copy_files
copy_dirs

echo 'Configure System'
dnf install -y update
dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).
noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
sudo dnf upgrade -y --refresh
sudo dnf update -y @core
sudo dnf group install -y multimedia
sudo dnf install -y \
    vim btop curl \
    rpmfusion-\*-appstream-data \
    cabextract xorg-x11-font-utils \
    fontconfig \
    gnome-tweaks gnome-extensions-app \
    ffmpeg-libs libva libva-utils \
    docker fzf \
    cascadia-code-nf-fonts gitui yq

sudo dnf config-manager setopt fedora-cisco-openh264.enabled=1
gsettings set org.gnome.desktop.interface show-battery-percentage true
sudo rpm -i https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm
sudo systemctl disable NetworkManager-wait-online.service

echo 'Installing oh-my-bash'
bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"

echo 'Prepare Tmux'
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
~/.tmux/plugins/tpm/tpm
tmux source ~/.tmux.conf
~/.tmux/plugins/tpm/bin/install_plugins

echo -e "Installation complete \xE2\x9A\xA1"

